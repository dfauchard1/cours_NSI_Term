{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Num\u00e9rique et Sciences Informatiques \u2693\ufe0e En informatique, il n'y a pas de pr\u00e9-requis. Si vous \u00eates motiv\u00e9s, si vous y passez du temps, vous serez bons, c'est tout. Les r\u00e9sultats que vous obtiendrez sont strictement li\u00e9s \u00e0 votre temps d'investissement dans cette mati\u00e8re. Le contenu de ce site \u2693\ufe0e Ce site est destin\u00e9 aux \u00e9l\u00e8ves qui suivent la sp\u00e9cialit\u00e9 NSI en classe de Terminale, il est compos\u00e9 des diff\u00e9rents chapitres au programme de l'ann\u00e9e, mais aussi de nombreux exercices et de guides Les structures de donn\u00e9es : file, piles, arbres et graphes \u2693\ufe0e Les algorithmes \u2693\ufe0e Les langages de programmation \u2693\ufe0e Les bases de donn\u00e9es \u2693\ufe0e L'architecture des machines et les syt\u00e8mes d'exploitation \u2693\ufe0e Dans ce cours nous utiliserons essentiellement le langage Python. Pourquoi ? Ce langage poss\u00e8de une syntaxe relativement simple qui nous permet de coder vite et bien. Les programmes fonctionnent rapidement et la mise au point est facilit\u00e9e avec le mode interactif. Cet apprentissage avec Python vous donnera les bases essentielles de la programmation et sera facilement transposable sur un autre langage. L'environnement Python poss\u00e8de un atout de taille : de nombreuses librairies sp\u00e9cialis\u00e9es permettent d'int\u00e9grer de nouvelles fonctionnalit\u00e9s en un claquement de doigts : Le traitement des donn\u00e9es : Panda, Bokeh Le web : Django Les math\u00e9matiques : Numpy, Scipy L'intelligence artificielle : Keras, Tensorflow Le jeu : Pygame L'image : PIL, OpenCV ... Python sur sa machine \u2693\ufe0e V\u00e9rification de l'installation et de la version de Python install\u00e9 sur votre ordinateur Il se peut qu'une version de Python soit d\u00e9j\u00e0 pr\u00e9sente sur votre ordinateur. Suivez les indications ci-dessous pour le savoir Sous windows 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s === \"Sous Mac\" !!! help \"1- Avec l'outil de recherche (la loupe) rechercher l'application terminal \" !!! help \"2- une fois l'application lanc\u00e9e, tapez la commande python3 --version \" !!! conclu \"Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur\" !!! help \"3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python3 \" !!! conclu \"La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s\" ### Installer Python Installation de Python Sous Windows Sous Mac Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet N'oubliez pas de cliquer les 2 cases en bas (Install... et Add Python...), avant de passer \u00e0 l'\u00e9tape suivante 4- Cliquez sur le bouton Customize installation (pas d'installation rapide) Cochez les bonnes cases avant de passer \u00e0 l'\u00e9tape suivante V\u00e9rifiez que le r\u00e9pertoire d'installation soit bien le r\u00e9pertoire des programmes de Windows Python est install\u00e9 Si vous souhaitez d\u00e9sinstaller une version, il vous faut relancer l'installateur d'origine Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet 4- Cliquez sur le bouton Continuer 5- Cliquez sur le bouton Continuer 6- Cliquez sur le bouton Continuer 7- Cliquez sur le bouton Accepter 8- Cliquez sur le bouton Continuer 9- Cliquez sur le bouton Installer le programme s'installe 10- le programme est install\u00e9 Installer des librairies \u2693\ufe0e Installer des librairies Sous Windows\"\" Sous Mac\" 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python.exe -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python.exe -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python3 -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame Des outils pour d\u00e9velopper \u2693\ufe0e Les environnements de d\u00e9veloppement Pour cr\u00e9er des programmes vous pouvez utiliser un \u00e9diteur de texte standard, mais ce n'est pas le choix le plus pratique et le plus efficace. Un environnement de d\u00e9veloppement (IDE) fournit une interface adapt\u00e9e aux diff\u00e9rentes t\u00e2ches du d\u00e9veloppeur. Plusieurs choix possibles : des applications sur l'ordinateur, 2 essentiellement : Thonny, un environnement l\u00e9ger qui permet un d\u00e9boguage rapide Visual Studio Code, un environnement plus professionnel des applications en ligne : Python Tutor, essentiellement pour apprendre les m\u00e9canismes principaux de la programmation Basthon : un \u00e9diteur python en ligne Replit : une application en ligne qui permet le travail en \u00e9quipe sur le m\u00eame fichier Vous aurez aussi la possibilit\u00e9 de travailler directement en ligne sur ce site Thonny Visual Studio Code Python tutor Basthon Replit Un \u00e9diteur simple et basique, qui permet de faire du pas \u00e0 pas facilement (pour d\u00e9boguer ou comprendre un programme) 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://thonny.org 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC ou mac), pour l'installer sur votre machine 3- cliquez sur le bouton 'install for users', puis pour les \u00e9crans suivants acceptez par d\u00e9faut 4- lors du premier lancement vous pouvez choisir la langue par d\u00e9faut Thonny installe sa propre version de Python, ce qui oblige en particulier \u00e0 installer les nouvelles librairies par l'interm\u00e9diaire de l'interface Thonny 5- dans le menu Outils, avec la commande G\u00e9rer les paquets... 6- Une recherche du module souhait\u00e9, puis son installation Un \u00e9diteur beaucoup plus professionnel, mais rapide et tr\u00e8s performant. A l'origine c'est un produit gratuit d\u00e9riv\u00e9 du produit phare de chez Microsoft 'Visual Studio'. Il a \u00e9t\u00e9 tr\u00e8s vite adopt\u00e9 par de nombreux d\u00e9veloppeurs et est devenu un produit r\u00e9guli\u00e8rement maintenu et am\u00e9lior\u00e9. Il est toujours gratuit, robuste et mature. De plus gr\u00e2ce \u00e0 ses modules il pourra vous servir pour beaucoup d'autres langages 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://code.visualstudio.com/ et cliquez sur le bouton Download 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC, mac ou linux), pour l'installer sur votre machine 3- s\u00e9lectionnez 'Je comprends et ...' et cliquez sur Suivant 4- gardez le dossier de destination propos\u00e9 et cliquez sur Suivant 5 cliquez sur Suivant 6- vous pouvez opter pour une icone sur le bureau, cliquez sur Suivant 7- cliquez sur Installer Apr\u00e8s cette premi\u00e8re installation, il va falloir ajouter quelques extensions pour pouvoir \u00eatre vraiment op\u00e9rationnel Nous allons pour cela utiliser l'option 'extensions' sur le cot\u00e9 gauche de l'application Il existe de nombreuses extensions Il existe une option originale pour d\u00e9couvrir la programmation en Python gr\u00e2ce au logiciel en ligne Python Tutor. Cet outil permet de visualiser en live le d\u00e9roulement d'un programme. C'est un outil p\u00e9dagogique de choix qui de plus ne requiert aucune installation. Python Tutor a \u00e9t\u00e9 cr\u00e9\u00e9 par Philip Guo, professeur assistant \u00e0 l'universit\u00e9 de Californie. Il a cr\u00e9e Python Tutor pour aider les gens \u00e0 comprendre ce qu'il se passe chaque fois qu'une ligne de code est ex\u00e9cut\u00e9e. Disponible en licence libre, cet outil est accessible depuis le site : http://pythontutor.com/live.html On cr\u00e9\u00e9 son code, on clique sur le bouton 'Visualize Execution' On ex\u00e9cute le programme pas \u00e0 pas Si vous ne pouvez pas installer d'application sur votre machine et que vous souhaitez tout de m\u00eame tester quelques programmes Python, vous avez la solution Basthon. Un site en ligne qui permet de faire tourner vos programmes. Cette application est relativement puissante et vous pourrez faire tourner pratiquement tous les programmes \u00e0 voir cette ann\u00e9e. La documentation est tr\u00e8s bien faite (en fran\u00e7ais). disponible sur le site https://basthon.fr La console Python Il existe m\u00eame un module tutor qui permet d'utiliser l'application en ligne Python Tutor from tutor import tutor a = 5 a = a + 1 tutor () Un autre style de site en ligne. A la fa\u00e7on GitHub, ce site permet de cr\u00e9er des programmes en \u00e9quipe, avec une interface d'ex\u00e9cution","title":"Introduction"},{"location":"#numerique-et-sciences-informatiques","text":"En informatique, il n'y a pas de pr\u00e9-requis. Si vous \u00eates motiv\u00e9s, si vous y passez du temps, vous serez bons, c'est tout. Les r\u00e9sultats que vous obtiendrez sont strictement li\u00e9s \u00e0 votre temps d'investissement dans cette mati\u00e8re.","title":"Num\u00e9rique et Sciences Informatiques"},{"location":"#le-contenu-de-ce-site","text":"Ce site est destin\u00e9 aux \u00e9l\u00e8ves qui suivent la sp\u00e9cialit\u00e9 NSI en classe de Terminale, il est compos\u00e9 des diff\u00e9rents chapitres au programme de l'ann\u00e9e, mais aussi de nombreux exercices et de guides","title":"Le contenu de ce site"},{"location":"#les-structures-de-donnees-file-piles-arbres-et-graphes","text":"","title":"Les structures de donn\u00e9es : file, piles, arbres et graphes"},{"location":"#les-algorithmes","text":"","title":"Les algorithmes"},{"location":"#les-langages-de-programmation","text":"","title":"Les langages de programmation"},{"location":"#les-bases-de-donnees","text":"","title":"Les bases de donn\u00e9es"},{"location":"#larchitecture-des-machines-et-les-sytemes-dexploitation","text":"Dans ce cours nous utiliserons essentiellement le langage Python. Pourquoi ? Ce langage poss\u00e8de une syntaxe relativement simple qui nous permet de coder vite et bien. Les programmes fonctionnent rapidement et la mise au point est facilit\u00e9e avec le mode interactif. Cet apprentissage avec Python vous donnera les bases essentielles de la programmation et sera facilement transposable sur un autre langage. L'environnement Python poss\u00e8de un atout de taille : de nombreuses librairies sp\u00e9cialis\u00e9es permettent d'int\u00e9grer de nouvelles fonctionnalit\u00e9s en un claquement de doigts : Le traitement des donn\u00e9es : Panda, Bokeh Le web : Django Les math\u00e9matiques : Numpy, Scipy L'intelligence artificielle : Keras, Tensorflow Le jeu : Pygame L'image : PIL, OpenCV ...","title":"L'architecture des machines et les syt\u00e8mes d'exploitation"},{"location":"#python-sur-sa-machine","text":"V\u00e9rification de l'installation et de la version de Python install\u00e9 sur votre ordinateur Il se peut qu'une version de Python soit d\u00e9j\u00e0 pr\u00e9sente sur votre ordinateur. Suivez les indications ci-dessous pour le savoir Sous windows 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s === \"Sous Mac\" !!! help \"1- Avec l'outil de recherche (la loupe) rechercher l'application terminal \" !!! help \"2- une fois l'application lanc\u00e9e, tapez la commande python3 --version \" !!! conclu \"Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur\" !!! help \"3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python3 \" !!! conclu \"La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s\" ### Installer Python Installation de Python Sous Windows Sous Mac Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet N'oubliez pas de cliquer les 2 cases en bas (Install... et Add Python...), avant de passer \u00e0 l'\u00e9tape suivante 4- Cliquez sur le bouton Customize installation (pas d'installation rapide) Cochez les bonnes cases avant de passer \u00e0 l'\u00e9tape suivante V\u00e9rifiez que le r\u00e9pertoire d'installation soit bien le r\u00e9pertoire des programmes de Windows Python est install\u00e9 Si vous souhaitez d\u00e9sinstaller une version, il vous faut relancer l'installateur d'origine Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet 4- Cliquez sur le bouton Continuer 5- Cliquez sur le bouton Continuer 6- Cliquez sur le bouton Continuer 7- Cliquez sur le bouton Accepter 8- Cliquez sur le bouton Continuer 9- Cliquez sur le bouton Installer le programme s'installe 10- le programme est install\u00e9","title":"Python sur sa machine"},{"location":"#installer-des-librairies","text":"Installer des librairies Sous Windows\"\" Sous Mac\" 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python.exe -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python.exe -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python3 -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame","title":"Installer des librairies"},{"location":"#des-outils-pour-developper","text":"Les environnements de d\u00e9veloppement Pour cr\u00e9er des programmes vous pouvez utiliser un \u00e9diteur de texte standard, mais ce n'est pas le choix le plus pratique et le plus efficace. Un environnement de d\u00e9veloppement (IDE) fournit une interface adapt\u00e9e aux diff\u00e9rentes t\u00e2ches du d\u00e9veloppeur. Plusieurs choix possibles : des applications sur l'ordinateur, 2 essentiellement : Thonny, un environnement l\u00e9ger qui permet un d\u00e9boguage rapide Visual Studio Code, un environnement plus professionnel des applications en ligne : Python Tutor, essentiellement pour apprendre les m\u00e9canismes principaux de la programmation Basthon : un \u00e9diteur python en ligne Replit : une application en ligne qui permet le travail en \u00e9quipe sur le m\u00eame fichier Vous aurez aussi la possibilit\u00e9 de travailler directement en ligne sur ce site Thonny Visual Studio Code Python tutor Basthon Replit Un \u00e9diteur simple et basique, qui permet de faire du pas \u00e0 pas facilement (pour d\u00e9boguer ou comprendre un programme) 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://thonny.org 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC ou mac), pour l'installer sur votre machine 3- cliquez sur le bouton 'install for users', puis pour les \u00e9crans suivants acceptez par d\u00e9faut 4- lors du premier lancement vous pouvez choisir la langue par d\u00e9faut Thonny installe sa propre version de Python, ce qui oblige en particulier \u00e0 installer les nouvelles librairies par l'interm\u00e9diaire de l'interface Thonny 5- dans le menu Outils, avec la commande G\u00e9rer les paquets... 6- Une recherche du module souhait\u00e9, puis son installation Un \u00e9diteur beaucoup plus professionnel, mais rapide et tr\u00e8s performant. A l'origine c'est un produit gratuit d\u00e9riv\u00e9 du produit phare de chez Microsoft 'Visual Studio'. Il a \u00e9t\u00e9 tr\u00e8s vite adopt\u00e9 par de nombreux d\u00e9veloppeurs et est devenu un produit r\u00e9guli\u00e8rement maintenu et am\u00e9lior\u00e9. Il est toujours gratuit, robuste et mature. De plus gr\u00e2ce \u00e0 ses modules il pourra vous servir pour beaucoup d'autres langages 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://code.visualstudio.com/ et cliquez sur le bouton Download 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC, mac ou linux), pour l'installer sur votre machine 3- s\u00e9lectionnez 'Je comprends et ...' et cliquez sur Suivant 4- gardez le dossier de destination propos\u00e9 et cliquez sur Suivant 5 cliquez sur Suivant 6- vous pouvez opter pour une icone sur le bureau, cliquez sur Suivant 7- cliquez sur Installer Apr\u00e8s cette premi\u00e8re installation, il va falloir ajouter quelques extensions pour pouvoir \u00eatre vraiment op\u00e9rationnel Nous allons pour cela utiliser l'option 'extensions' sur le cot\u00e9 gauche de l'application Il existe de nombreuses extensions Il existe une option originale pour d\u00e9couvrir la programmation en Python gr\u00e2ce au logiciel en ligne Python Tutor. Cet outil permet de visualiser en live le d\u00e9roulement d'un programme. C'est un outil p\u00e9dagogique de choix qui de plus ne requiert aucune installation. Python Tutor a \u00e9t\u00e9 cr\u00e9\u00e9 par Philip Guo, professeur assistant \u00e0 l'universit\u00e9 de Californie. Il a cr\u00e9e Python Tutor pour aider les gens \u00e0 comprendre ce qu'il se passe chaque fois qu'une ligne de code est ex\u00e9cut\u00e9e. Disponible en licence libre, cet outil est accessible depuis le site : http://pythontutor.com/live.html On cr\u00e9\u00e9 son code, on clique sur le bouton 'Visualize Execution' On ex\u00e9cute le programme pas \u00e0 pas Si vous ne pouvez pas installer d'application sur votre machine et que vous souhaitez tout de m\u00eame tester quelques programmes Python, vous avez la solution Basthon. Un site en ligne qui permet de faire tourner vos programmes. Cette application est relativement puissante et vous pourrez faire tourner pratiquement tous les programmes \u00e0 voir cette ann\u00e9e. La documentation est tr\u00e8s bien faite (en fran\u00e7ais). disponible sur le site https://basthon.fr La console Python Il existe m\u00eame un module tutor qui permet d'utiliser l'application en ligne Python Tutor from tutor import tutor a = 5 a = a + 1 tutor () Un autre style de site en ligne. A la fa\u00e7on GitHub, ce site permet de cr\u00e9er des programmes en \u00e9quipe, avec une interface d'ex\u00e9cution","title":"Des outils pour d\u00e9velopper"},{"location":"install_ide/","text":"Guide de l'IDE \u2693\ufe0e Exemple \u2693\ufe0e Un IDE se pr\u00e9sente sous cette forme : Enroulez-moi ! term term simple Lancer b1 = ['somme([]) == None', 'somme([1]) == 1', 'somme([1,2]) == 3', 'somme([-1,1]) == 0']bksl-nlb2 = ['sommation([1]) == 1', 'sommation([1,2]) == 3', 'sommation([-1,1]) == 0']bksl-nlbksl-nlbenchmark = (b1, b2)bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a + nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return None if len(L) == 0 else sum(L)bksl-nl def somme(L: list[int]) -> int:bksl-nl return None if len(L) == 0 else sum(L)bksl-nl Remarque sur la solution C'est simple mais il faut \u00eatre vigilant. Une autre remarque est possible Toujours simple mais toujours vigilant. >>> Il dispose de quatre boutons : Lancer le script : T\u00e9l\u00e9charger le script : T\u00e9l\u00e9verser un script : Valider le script avec des tests unitaires : Rappel Tout se fait du c\u00f4t\u00e9 client. Rien n'est envoy\u00e9 au serveur . Prise en main \u2693\ufe0e Par d\u00e9faut, la commande {{IDE('exo2')}} permet de charger un script plac\u00e9 dans docs/scripts/ . Organisation possible Classement par chapitre Classement par exercice Une page markdown regroupe de nombreux exercices. Par exemple : {{IDE('chapitre1/exo2')}} chargera le script exo2.py depuis docs/scripts/chapitre1/ . AJOUTER UN EXEMPLE d'ARBORESCENCE Une page markdown par exercice, comme indiqu\u00e9 dans mkdocs.yml . Dans ce cas, seul le chemin relatif depuis la position du fichier markdown dans l'arborescence est \u00e0 indiquer. Par exemple: mkdocs.yml contient la ligne - \"E-nsi \ud83c\udfd6\": dentiste/sujet.md . {{IDE('exo_dentiste')}} chargera le script exo_dentiste.py depuis docs/dentiste/ . AJOUTER UN EXEMPLE d'ARBORESCENCE Important Le bouton de validation du script \u00e0 l'aide de tests unitaires est pr\u00e9sent uniquement si vous fournissez un fichier nom_du_fichier_test.py pr\u00e9sent dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . La solution apparait au bout de 5 tests unitaires si vous fournissez un fichier nom_du_fichier_corr.py dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . Le lancement du script, le t\u00e9l\u00e9chargement et le t\u00e9l\u00e9versement sont pr\u00e9sentes par d\u00e9faut. Format de fichiers Fichier Python Fichier Correction Fichier Juge - Benchmark Fichier Juge - Assert Le script Python est \u00e9crit de mani\u00e8re classique. Les librairies standards sont accept\u00e9s. Les annotations, m\u00eame complexes, sont normalement accept\u00e9es : merci de me contacter si vous observez des comportements inattendus. Le fichier Python de correction nom_de_script_corr.py est \u00e9crit de mani\u00e8re classique. 1 2 def somme ( L : list [ int ]) -> int : return None if len ( L ) == 0 else sum ( L ) Le fichier de juge en ligne doit contenir une variable appel\u00e9e benchmark , de type list ou tuple : 1) Si l'on souhaite v\u00e9rifier une unique fonction gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 benchmark = [ 'longueur([])==0' , 'longueur([1,3,5,5])==4' , 'longueur([0]*100)==100' ] On a donc un tuple de cha\u00eenes de caract\u00e8res qui sera \u00e9valu\u00e9 avec eval () . 1) Si l'on souhaite v\u00e9rifier plusieurs fonctions gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 2 3 4 b1 = [ 'somme([]) == None' , 'somme([1]) == 1' , 'somme([1,2]) == 3' , 'somme([-1,1]) == 0' ] b2 = [ 'sommation([1]) == 1' , 'sommation([1,2]) == 3' , 'sommation([-1,1]) == 0' ] benchmark = ( b1 , b2 ) On a donc un tuple de tableau de cha\u00eenes de caract\u00e8res qui sera \u00e9valu\u00e9 avec eval () . Le fichier de juge en ligne peut \u00eatre \u00e9crit de mani\u00e8re beaucoup plus \"classique\" en utilisant assert : 1 2 3 assert longueur_ajout ([], []) == 0 , 'longueur_ajout([], []) == 0' assert longueur_ajout ([ 1 , 3 , 5 , 5 ],[]) == 4 , 'longueur_ajout([1, 3, 5, 5],[]) == 4' assert longueur_ajout ([ 0 ] * 100 , [ 1 ] * 20 ) == 120 , 'longueur_ajout([0]*100, [1]*20) == 120' Les assert sont directement \u00e9valu\u00e9s par Pyodide. Seul le test ayant \u00e9chou\u00e9 sera affich\u00e9. Les tests r\u00e9ussis n'afficheront rien. Pas de probl\u00e8me pour tester autant de fonctions que n\u00e9cessaire. Conclusion \u00c0 condition que les fichiers *_corr.py et *_test.py soient pr\u00e9sents, {{IDE('foo/bar/truc/muche/fichier')}} g\u00e8re tout seul : l'\u00e9nonc\u00e9, le juge en ligne, les fichiers de correction Plein d'exercices ! \u2693\ufe0e Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Remarque Ceci est un exemple complexe de remarque. La premi\u00e8re ligne du fichier de remarque doit \u00eatre vide La syntaxe markdown est compl\u00e8tement pr\u00e9serv\u00e9e. Par exemple, un tableau : a b c 1 2 3 Une admonition ? Vous pouvez inclure des admonitions et des superfences dans vos remarques. Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer assert longueurpy-undajout([], []) == 0, 'longueurpy-undajout([], []) == 0'bksl-nlassert longueurpy-undajout([1, 3, 5, 5],[]) == 4, 'longueurpy-undajout([1, 3, 5, 5],[]) == 4'bksl-nlassert longueurpy-undajout([0]py-str100, [1]py-str20) == 120, 'longueurpy-undajout([0]py-str100, [1]py-str20) == 120'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl Des admonitions en remarque On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Toujours plus On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Encore On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00e8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl On peut bien sur enrouler tout cela... Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Remarque Ceci est un exemple complexe de remarque. La premi\u00e8re ligne du fichier de remarque doit \u00eatre vide La syntaxe markdown est compl\u00e8tement pr\u00e9serv\u00e9e. Par exemple, un tableau : a b c 1 2 3 Une admonition ? Vous pouvez inclure des admonitions et des superfences dans vos remarques. Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer assert longueurpy-undajout([], []) == 0, 'longueurpy-undajout([], []) == 0'bksl-nlassert longueurpy-undajout([1, 3, 5, 5],[]) == 4, 'longueurpy-undajout([1, 3, 5, 5],[]) == 4'bksl-nlassert longueurpy-undajout([0]py-str100, [1]py-str20) == 120, 'longueurpy-undajout([0]py-str100, [1]py-str20) == 120'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl Des admonitions en remarque On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Toujours plus On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Encore On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00e8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl Technique ! \u2693\ufe0e Pour l'instant, j'ai la grosse flemme d'\u00e9crire cette section. En quelques mots, on cr\u00e9e deux div d\u00e9sign\u00e9 par un num\u00e9ro auto-incr\u00e9ment\u00e9 : < div id = \"editor_6\" > cr\u00e9e la partie \u00e9diteur de texte. Ce div est converti en \u00e9diteur gr\u00e2ce \u00e0 l' \u00e9diteur ACE ; < div id = \"term_editor_6\" > cr\u00e9e la partie Terminal. Le Terminal n'est cr\u00e9\u00e9 qu'au moment de la validation du script ou du juge en ligne. Il est cr\u00e9\u00e9 gr\u00e2ce au plugin Terminal de jQuery par converstion du div (voir section Guide du Terminal).","title":"Guide de l'IDE"},{"location":"install_ide/#guide-de-lide","text":"","title":"Guide de l'IDE"},{"location":"install_ide/#exemple","text":"Un IDE se pr\u00e9sente sous cette forme : Enroulez-moi ! term term simple Lancer b1 = ['somme([]) == None', 'somme([1]) == 1', 'somme([1,2]) == 3', 'somme([-1,1]) == 0']bksl-nlb2 = ['sommation([1]) == 1', 'sommation([1,2]) == 3', 'sommation([-1,1]) == 0']bksl-nlbksl-nlbenchmark = (b1, b2)bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a + nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return None if len(L) == 0 else sum(L)bksl-nl def somme(L: list[int]) -> int:bksl-nl return None if len(L) == 0 else sum(L)bksl-nl Remarque sur la solution C'est simple mais il faut \u00eatre vigilant. Une autre remarque est possible Toujours simple mais toujours vigilant. >>> Il dispose de quatre boutons : Lancer le script : T\u00e9l\u00e9charger le script : T\u00e9l\u00e9verser un script : Valider le script avec des tests unitaires : Rappel Tout se fait du c\u00f4t\u00e9 client. Rien n'est envoy\u00e9 au serveur .","title":"Exemple"},{"location":"install_ide/#prise-en-main","text":"Par d\u00e9faut, la commande {{IDE('exo2')}} permet de charger un script plac\u00e9 dans docs/scripts/ . Organisation possible Classement par chapitre Classement par exercice Une page markdown regroupe de nombreux exercices. Par exemple : {{IDE('chapitre1/exo2')}} chargera le script exo2.py depuis docs/scripts/chapitre1/ . AJOUTER UN EXEMPLE d'ARBORESCENCE Une page markdown par exercice, comme indiqu\u00e9 dans mkdocs.yml . Dans ce cas, seul le chemin relatif depuis la position du fichier markdown dans l'arborescence est \u00e0 indiquer. Par exemple: mkdocs.yml contient la ligne - \"E-nsi \ud83c\udfd6\": dentiste/sujet.md . {{IDE('exo_dentiste')}} chargera le script exo_dentiste.py depuis docs/dentiste/ . AJOUTER UN EXEMPLE d'ARBORESCENCE Important Le bouton de validation du script \u00e0 l'aide de tests unitaires est pr\u00e9sent uniquement si vous fournissez un fichier nom_du_fichier_test.py pr\u00e9sent dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . La solution apparait au bout de 5 tests unitaires si vous fournissez un fichier nom_du_fichier_corr.py dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . Le lancement du script, le t\u00e9l\u00e9chargement et le t\u00e9l\u00e9versement sont pr\u00e9sentes par d\u00e9faut. Format de fichiers Fichier Python Fichier Correction Fichier Juge - Benchmark Fichier Juge - Assert Le script Python est \u00e9crit de mani\u00e8re classique. Les librairies standards sont accept\u00e9s. Les annotations, m\u00eame complexes, sont normalement accept\u00e9es : merci de me contacter si vous observez des comportements inattendus. Le fichier Python de correction nom_de_script_corr.py est \u00e9crit de mani\u00e8re classique. 1 2 def somme ( L : list [ int ]) -> int : return None if len ( L ) == 0 else sum ( L ) Le fichier de juge en ligne doit contenir une variable appel\u00e9e benchmark , de type list ou tuple : 1) Si l'on souhaite v\u00e9rifier une unique fonction gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 benchmark = [ 'longueur([])==0' , 'longueur([1,3,5,5])==4' , 'longueur([0]*100)==100' ] On a donc un tuple de cha\u00eenes de caract\u00e8res qui sera \u00e9valu\u00e9 avec eval () . 1) Si l'on souhaite v\u00e9rifier plusieurs fonctions gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 2 3 4 b1 = [ 'somme([]) == None' , 'somme([1]) == 1' , 'somme([1,2]) == 3' , 'somme([-1,1]) == 0' ] b2 = [ 'sommation([1]) == 1' , 'sommation([1,2]) == 3' , 'sommation([-1,1]) == 0' ] benchmark = ( b1 , b2 ) On a donc un tuple de tableau de cha\u00eenes de caract\u00e8res qui sera \u00e9valu\u00e9 avec eval () . Le fichier de juge en ligne peut \u00eatre \u00e9crit de mani\u00e8re beaucoup plus \"classique\" en utilisant assert : 1 2 3 assert longueur_ajout ([], []) == 0 , 'longueur_ajout([], []) == 0' assert longueur_ajout ([ 1 , 3 , 5 , 5 ],[]) == 4 , 'longueur_ajout([1, 3, 5, 5],[]) == 4' assert longueur_ajout ([ 0 ] * 100 , [ 1 ] * 20 ) == 120 , 'longueur_ajout([0]*100, [1]*20) == 120' Les assert sont directement \u00e9valu\u00e9s par Pyodide. Seul le test ayant \u00e9chou\u00e9 sera affich\u00e9. Les tests r\u00e9ussis n'afficheront rien. Pas de probl\u00e8me pour tester autant de fonctions que n\u00e9cessaire. Conclusion \u00c0 condition que les fichiers *_corr.py et *_test.py soient pr\u00e9sents, {{IDE('foo/bar/truc/muche/fichier')}} g\u00e8re tout seul : l'\u00e9nonc\u00e9, le juge en ligne, les fichiers de correction","title":"Prise en main"},{"location":"install_ide/#plein-dexercices","text":"Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Remarque Ceci est un exemple complexe de remarque. La premi\u00e8re ligne du fichier de remarque doit \u00eatre vide La syntaxe markdown est compl\u00e8tement pr\u00e9serv\u00e9e. Par exemple, un tableau : a b c 1 2 3 Une admonition ? Vous pouvez inclure des admonitions et des superfences dans vos remarques. Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer assert longueurpy-undajout([], []) == 0, 'longueurpy-undajout([], []) == 0'bksl-nlassert longueurpy-undajout([1, 3, 5, 5],[]) == 4, 'longueurpy-undajout([1, 3, 5, 5],[]) == 4'bksl-nlassert longueurpy-undajout([0]py-str100, [1]py-str20) == 120, 'longueurpy-undajout([0]py-str100, [1]py-str20) == 120'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl Des admonitions en remarque On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Toujours plus On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Encore On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00e8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl On peut bien sur enrouler tout cela... Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Remarque Ceci est un exemple complexe de remarque. La premi\u00e8re ligne du fichier de remarque doit \u00eatre vide La syntaxe markdown est compl\u00e8tement pr\u00e9serv\u00e9e. Par exemple, un tableau : a b c 1 2 3 Une admonition ? Vous pouvez inclure des admonitions et des superfences dans vos remarques. Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer assert longueurpy-undajout([], []) == 0, 'longueurpy-undajout([], []) == 0'bksl-nlassert longueurpy-undajout([1, 3, 5, 5],[]) == 4, 'longueurpy-undajout([1, 3, 5, 5],[]) == 4'bksl-nlassert longueurpy-undajout([0]py-str100, [1]py-str20) == 120, 'longueurpy-undajout([0]py-str100, [1]py-str20) == 120'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl Des admonitions en remarque On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Toujours plus On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Encore On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00e8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl","title":"Plein d'exercices !"},{"location":"install_ide/#technique","text":"Pour l'instant, j'ai la grosse flemme d'\u00e9crire cette section. En quelques mots, on cr\u00e9e deux div d\u00e9sign\u00e9 par un num\u00e9ro auto-incr\u00e9ment\u00e9 : < div id = \"editor_6\" > cr\u00e9e la partie \u00e9diteur de texte. Ce div est converti en \u00e9diteur gr\u00e2ce \u00e0 l' \u00e9diteur ACE ; < div id = \"term_editor_6\" > cr\u00e9e la partie Terminal. Le Terminal n'est cr\u00e9\u00e9 qu'au moment de la validation du script ou du juge en ligne. Il est cr\u00e9\u00e9 gr\u00e2ce au plugin Terminal de jQuery par converstion du div (voir section Guide du Terminal).","title":"Technique !"},{"location":"install_term/","text":"Guide du Terminal \u2693\ufe0e Exemple \u2693\ufe0e >>> Technique \u2693\ufe0e Techniquement, le terminal est obtenu en utilisant le plugin Terminal de jQuery 1 . On cr\u00e9e un < div > qui poss\u00e8de un identificateur num\u00e9ro (entier commen\u00e7ant \u00e0 1 et auto-incr\u00e9ment\u00e9). Ce < div > est ensuite colori\u00e9 \u00e0 l'aide du plugin Terminal. Technique Un probl\u00e8me provient du focus du terminal. Par d\u00e9faut, le dernier terminal cr\u00e9\u00e9 aura le focus, ce qui souvent nous emm\u00e8ne en bas de page... La solution a \u00e9t\u00e9 de cr\u00e9er deux < div > : Le premier < div > est un simple bloc de texte mimant un Terminal. Il est appel\u00e9 fake_id . Le second < div > contient effectivement le Terminal. Il ne se cr\u00e9era que si l'\u00e9v\u00e9nement onclick du < div id = fake_id > est d\u00e9clench\u00e9. Vraiment tr\u00e8s technique Voir aussi les fonctions pyterm et start_term de interpreter.js . C'est pour cela qu'on ne peut pas se passer de jQuery actuellement. \u21a9","title":"Guide du Terminal"},{"location":"install_term/#guide-du-terminal","text":"","title":"Guide du Terminal"},{"location":"install_term/#exemple","text":">>>","title":"Exemple"},{"location":"install_term/#technique","text":"Techniquement, le terminal est obtenu en utilisant le plugin Terminal de jQuery 1 . On cr\u00e9e un < div > qui poss\u00e8de un identificateur num\u00e9ro (entier commen\u00e7ant \u00e0 1 et auto-incr\u00e9ment\u00e9). Ce < div > est ensuite colori\u00e9 \u00e0 l'aide du plugin Terminal. Technique Un probl\u00e8me provient du focus du terminal. Par d\u00e9faut, le dernier terminal cr\u00e9\u00e9 aura le focus, ce qui souvent nous emm\u00e8ne en bas de page... La solution a \u00e9t\u00e9 de cr\u00e9er deux < div > : Le premier < div > est un simple bloc de texte mimant un Terminal. Il est appel\u00e9 fake_id . Le second < div > contient effectivement le Terminal. Il ne se cr\u00e9era que si l'\u00e9v\u00e9nement onclick du < div id = fake_id > est d\u00e9clench\u00e9. Vraiment tr\u00e8s technique Voir aussi les fonctions pyterm et start_term de interpreter.js . C'est pour cela qu'on ne peut pas se passer de jQuery actuellement. \u21a9","title":"Technique"},{"location":"sandbox/","text":"Bac \u00e0 sable \u2693\ufe0e // // jQuery cross domain ajax // $.get(\"http://www.example.org/ajax.php\").done(function (data) { // console.log(data); // }); // // using XMLHttpRequest // var xhr = new XMLHttpRequest(); // xhr.open(\"GET\", \"http://www.example.org/ajax.php\", true); // xhr.onload = function () { // console.log(xhr.responseText); // }; // xhr.send(); // using the Fetch API const myInit = { method: 'GET', mode: 'no-cors', cache: 'default', }; fetch(\"https://gitlab.com/bouillotvincent/tests-avec-mkdocs/-/blob/main/main.py\", myInit) .then(function(response) { return response.blob(); }) .then(function(myBlob) { const objectURL = URL.createObjectURL(myBlob); console.log(objectURL); });","title":"Bac \u00e0 sable"},{"location":"sandbox/#bac-a-sable","text":"// // jQuery cross domain ajax // $.get(\"http://www.example.org/ajax.php\").done(function (data) { // console.log(data); // }); // // using XMLHttpRequest // var xhr = new XMLHttpRequest(); // xhr.open(\"GET\", \"http://www.example.org/ajax.php\", true); // xhr.onload = function () { // console.log(xhr.responseText); // }; // xhr.send(); // using the Fetch API const myInit = { method: 'GET', mode: 'no-cors', cache: 'default', }; fetch(\"https://gitlab.com/bouillotvincent/tests-avec-mkdocs/-/blob/main/main.py\", myInit) .then(function(response) { return response.blob(); }) .then(function(myBlob) { const objectURL = URL.createObjectURL(myBlob); console.log(objectURL); });","title":"Bac \u00e0 sable"},{"location":"todo/","text":"Des questions techniques et m\u00e9taphysiques \u2693\ufe0e Todo list \u2693\ufe0e :x: D\u00e9marrer le comptage des 5 essais avant r\u00e9v\u00e9lation du code si les premiers tests sont pass\u00e9s. :x: Autocompl\u00e9tion du code avec une touche simple (pas de Live autocompl\u00e9tion -_-) :x: La fen\u00eatre d\u2019\u00e9dition est r\u00e9serv\u00e9e au code de l\u2019\u00e9l\u00e8ve. Les premiers tests sont dans une fen\u00eatre coll\u00e9e, juste en dessous, visible mais non \u00e9ditable. Ils peuvent \u00eatre masqu\u00e9s/affich\u00e9s. :x: Am\u00e9lioration des performances d'affichage :x: t\u00e9l\u00e9charger tous les codes \u00e9crits dans les \u00e9diteurs de la page en un seul fichier :x: Doctests :white_check_mark: eval d\u00e9sactiv\u00e9 en fonction de la pr\u00e9sence du mot-cl\u00e9 SANS = 'eval,max' dans l'appel \u00e0 IDE(..., SANS = ...) . Prendre en compte les erreurs du cr\u00e9ateur SANS = 'eval, MaX , min' . :white_check_mark: Erreur d'assertions et gestion de crash de code Mode verbose pour les tests / mode simple Mode infini pour les tentatives :white_check_mark: sauvegarde des codes lors d'un rechargement de la page (oui!!!!) :white_check_mark: gestion des fichiers d'initialisation (pour les codes longs) :white_check_mark: Le code solution apparait dans le code source... A cacher d'une mani\u00e8re ou d'une autre :white_check_mark: Mode sombre / Mode clair (r\u00e9glage ind\u00e9pendant du choix de palette) :white_check_mark: Caract\u00e8res non-ASCII pour nom de fichier et contenu :white_check_mark: Fichier de remarque, <nom_du_truc>_rem.txt Solution en page externe pour les fichiers longs (exclue du menu de navigation avec le hack) Solution en menu d\u00e9roulant pour les fichiers courts :white_check_mark: Modifications des emoji par des svg classe :white_check_mark: Infobulles :white_check_mark: Chemins relatifs :white_check_mark: Nombre d'essais vari\u00e9s En d\u00e9veloppement \u2693\ufe0e Inclure des fichiers externes avec macros fonctionnels Jinja syntax to include an external remark file, including an IDE to give the correction : {% include 'scripts/demo/demo2_rem.txt' %} This is the future of the online judge Can include automatically a correction. Needs lots of refactoring though \u23f3\u23f3\u23f3. REPL > IDE Une reprise compl\u00e8te de la d\u00e9nomination a \u00e9t\u00e9 faite. Les REPL s'appellent maintenant (et \u00e0 raison) IDE Merci Fred Leleu pour le travail suppl\u00e9mentaire \ud83d\ude0d . Fichiers javascripts C'est le bazar dans l'appel des fichiers JS. Si quelqu'un peut me mettre de l'ordre dans tout cela, je suis preneur ! J'ai repris l'organisation g\u00e9n\u00e9rale. C'est toujours un peu le bazar mais cela me semble acceptable. Importation automatique de module Pyodide propose un module micropip permettant de charger les modules manquants. Nous pourrions faire des interfaces graphiques \u00e0 l'aide de cela mais est-ce vraiment utile ? Evaluateur de code Avec l'utilisation du code de fjunier , nous pourrions int\u00e9grer un juge en ligne ? Utile ou non ? L'\u00e9valuateur de code est fonctionnel et permet de faire des benchmarks complexes. Le bouton du juge en ligne n'apparaitra que s'il existe un fichier de benchmark test_nom_de_script.py . Le corrig\u00e9 n'apparaitra que si un fichier de corr_nom_de_script.py est pr\u00e9sent. Il faudra cr\u00e9er un pipe pour g\u00e9n\u00e9rer automatiquement un fichier de benchmark depuis un script de corrig\u00e9. Javascript et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Je devais vraiment dormir. On peut tout simplement ajouter une ligne dans le template Jinja2 main.html du custom_dir de mkdocs. Cela permet de charger le javascript n\u00e9cessaire au bon fonctionnement des IDE sans s'emb\u00eater. Boutons et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Ajout de boutons permettant de t\u00e9l\u00e9charger les scripts \u00e9crits et t\u00e9l\u00e9verser les scripts disponibles localement. Evaluateur de code ajout\u00e9. Partis pris \u2693\ufe0e Namespace partag\u00e9 Je trouve ce mode tr\u00e8s pratique car on conserve nos fonctions et variables d'un terminal \u00e0 l'autre au cours d'une le\u00e7on. P\u00e9dagogiquement, c'est plus discutable car certaines variables seront initialis\u00e9es dans le Terminal 1 et utilis\u00e9es dans le Terminal 2. Cela cache la notion d'initialisation. IDE vertical Est-ce vraiment utile de les conserver ? Cela ralentit le chargement de la page web et consomme des ressources pour l'auto-redimensionnement de la partie terminal du IDE. Cela est sp\u00e9cialement visible sur mobile (ou ce mode est d'ailleurs inutile). Quelques modifications ont permis de les conserver sans alt\u00e9rer les performances. macro Python Ma solution est un peu sale mais a-t-on vraiment le choix avec l'inclusion de balise HTML ? J'ai choisi de diviser le probl\u00e8me en sous-fonctions. Cela semble plus lisible \u00e0 pr\u00e9sent avec : lecture de fichier avec def read_ext_file () et def generate_content () , une seule macro IDE avec deux modes ('v' et 'h' par d\u00e9faut). Palette Ideas // __md_scope=new URL(\".\",location) // __md_get=(e, =localStorage,t=__md_scope)=>JSON.parse( .getItem(t.pathname+\".\"+e)) // console.log('BLAM', __md_scope) // console.log('localStorage', localStorage) // console.log('localStorage 2', __md_scope.pathname+\".\"+\"__palette\") // console.log('localStorage 3', localStorage.getItem(__md_scope.pathname+\".\"+\"__palette\")) // console.log('localStorage 4', __md_get(\"__palette\").index, __md_get(\"__palette\").color.scheme)","title":"Des questions techniques et m\u00e9taphysiques"},{"location":"todo/#des-questions-techniques-et-metaphysiques","text":"","title":"Des questions techniques et m\u00e9taphysiques"},{"location":"todo/#todo-list","text":":x: D\u00e9marrer le comptage des 5 essais avant r\u00e9v\u00e9lation du code si les premiers tests sont pass\u00e9s. :x: Autocompl\u00e9tion du code avec une touche simple (pas de Live autocompl\u00e9tion -_-) :x: La fen\u00eatre d\u2019\u00e9dition est r\u00e9serv\u00e9e au code de l\u2019\u00e9l\u00e8ve. Les premiers tests sont dans une fen\u00eatre coll\u00e9e, juste en dessous, visible mais non \u00e9ditable. Ils peuvent \u00eatre masqu\u00e9s/affich\u00e9s. :x: Am\u00e9lioration des performances d'affichage :x: t\u00e9l\u00e9charger tous les codes \u00e9crits dans les \u00e9diteurs de la page en un seul fichier :x: Doctests :white_check_mark: eval d\u00e9sactiv\u00e9 en fonction de la pr\u00e9sence du mot-cl\u00e9 SANS = 'eval,max' dans l'appel \u00e0 IDE(..., SANS = ...) . Prendre en compte les erreurs du cr\u00e9ateur SANS = 'eval, MaX , min' . :white_check_mark: Erreur d'assertions et gestion de crash de code Mode verbose pour les tests / mode simple Mode infini pour les tentatives :white_check_mark: sauvegarde des codes lors d'un rechargement de la page (oui!!!!) :white_check_mark: gestion des fichiers d'initialisation (pour les codes longs) :white_check_mark: Le code solution apparait dans le code source... A cacher d'une mani\u00e8re ou d'une autre :white_check_mark: Mode sombre / Mode clair (r\u00e9glage ind\u00e9pendant du choix de palette) :white_check_mark: Caract\u00e8res non-ASCII pour nom de fichier et contenu :white_check_mark: Fichier de remarque, <nom_du_truc>_rem.txt Solution en page externe pour les fichiers longs (exclue du menu de navigation avec le hack) Solution en menu d\u00e9roulant pour les fichiers courts :white_check_mark: Modifications des emoji par des svg classe :white_check_mark: Infobulles :white_check_mark: Chemins relatifs :white_check_mark: Nombre d'essais vari\u00e9s","title":"Todo list"},{"location":"todo/#en-developpement","text":"Inclure des fichiers externes avec macros fonctionnels Jinja syntax to include an external remark file, including an IDE to give the correction : {% include 'scripts/demo/demo2_rem.txt' %} This is the future of the online judge Can include automatically a correction. Needs lots of refactoring though \u23f3\u23f3\u23f3. REPL > IDE Une reprise compl\u00e8te de la d\u00e9nomination a \u00e9t\u00e9 faite. Les REPL s'appellent maintenant (et \u00e0 raison) IDE Merci Fred Leleu pour le travail suppl\u00e9mentaire \ud83d\ude0d . Fichiers javascripts C'est le bazar dans l'appel des fichiers JS. Si quelqu'un peut me mettre de l'ordre dans tout cela, je suis preneur ! J'ai repris l'organisation g\u00e9n\u00e9rale. C'est toujours un peu le bazar mais cela me semble acceptable. Importation automatique de module Pyodide propose un module micropip permettant de charger les modules manquants. Nous pourrions faire des interfaces graphiques \u00e0 l'aide de cela mais est-ce vraiment utile ? Evaluateur de code Avec l'utilisation du code de fjunier , nous pourrions int\u00e9grer un juge en ligne ? Utile ou non ? L'\u00e9valuateur de code est fonctionnel et permet de faire des benchmarks complexes. Le bouton du juge en ligne n'apparaitra que s'il existe un fichier de benchmark test_nom_de_script.py . Le corrig\u00e9 n'apparaitra que si un fichier de corr_nom_de_script.py est pr\u00e9sent. Il faudra cr\u00e9er un pipe pour g\u00e9n\u00e9rer automatiquement un fichier de benchmark depuis un script de corrig\u00e9. Javascript et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Je devais vraiment dormir. On peut tout simplement ajouter une ligne dans le template Jinja2 main.html du custom_dir de mkdocs. Cela permet de charger le javascript n\u00e9cessaire au bon fonctionnement des IDE sans s'emb\u00eater. Boutons et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Ajout de boutons permettant de t\u00e9l\u00e9charger les scripts \u00e9crits et t\u00e9l\u00e9verser les scripts disponibles localement. Evaluateur de code ajout\u00e9.","title":"En d\u00e9veloppement"},{"location":"todo/#partis-pris","text":"Namespace partag\u00e9 Je trouve ce mode tr\u00e8s pratique car on conserve nos fonctions et variables d'un terminal \u00e0 l'autre au cours d'une le\u00e7on. P\u00e9dagogiquement, c'est plus discutable car certaines variables seront initialis\u00e9es dans le Terminal 1 et utilis\u00e9es dans le Terminal 2. Cela cache la notion d'initialisation. IDE vertical Est-ce vraiment utile de les conserver ? Cela ralentit le chargement de la page web et consomme des ressources pour l'auto-redimensionnement de la partie terminal du IDE. Cela est sp\u00e9cialement visible sur mobile (ou ce mode est d'ailleurs inutile). Quelques modifications ont permis de les conserver sans alt\u00e9rer les performances. macro Python Ma solution est un peu sale mais a-t-on vraiment le choix avec l'inclusion de balise HTML ? J'ai choisi de diviser le probl\u00e8me en sous-fonctions. Cela semble plus lisible \u00e0 pr\u00e9sent avec : lecture de fichier avec def read_ext_file () et def generate_content () , une seule macro IDE avec deux modes ('v' et 'h' par d\u00e9faut). Palette Ideas // __md_scope=new URL(\".\",location) // __md_get=(e, =localStorage,t=__md_scope)=>JSON.parse( .getItem(t.pathname+\".\"+e)) // console.log('BLAM', __md_scope) // console.log('localStorage', localStorage) // console.log('localStorage 2', __md_scope.pathname+\".\"+\"__palette\") // console.log('localStorage 3', localStorage.getItem(__md_scope.pathname+\".\"+\"__palette\")) // console.log('localStorage 4', __md_get(\"__palette\").index, __md_get(\"__palette\").color.scheme)","title":"Partis pris"},{"location":"cours/algorithmes/","text":"","title":"Algorithmes"},{"location":"cours/archis_et_se/","text":"","title":"Architectures mat\u00e9rielles et SE"},{"location":"cours/bases_donnees/","text":"","title":"Les bases de donn\u00e9es"},{"location":"cours/installation_python/","text":"Dans ce cours nous utiliserons essentiellement le langage Python. Pourquoi ? Ce langage poss\u00e8de une syntaxe relativement simple qui nous permet de coder vite et bien. Les programmes fonctionnent rapidement et la mise au point est facilit\u00e9e avec le mode interactif. Cet apprentissage avec Python vous donnera les bases essentielles de la programmation et sera facilement transposable sur un autre langage. L'environnement Python poss\u00e8de un atout de taille : de nombreuses librairies sp\u00e9cialis\u00e9es permettent d'int\u00e9grer de nouvelles fonctionnalit\u00e9s en un claquement de doigts : Le traitement des donn\u00e9es : Panda, Bokeh Le web : Django Les math\u00e9matiques : Numpy, Scipy L'intelligence artificielle : Keras, Tensorflow Le jeu : Pygame L'image : PIL, OpenCV ... Python sur sa machine \u2693\ufe0e V\u00e9rification de l'installation et de la version de Python install\u00e9 sur votre ordinateur Il se peut qu'une version de Python soit d\u00e9j\u00e0 pr\u00e9sente sur votre ordinateur. Suivez les indications ci-dessous pour le savoir Sous windows Sous Mac 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python3 La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s ### Installer Python Installation de Python Sous Windows Sous Mac Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet N'oubliez pas de cliquer les 2 cases en bas (Install... et Add Python...), avant de passer \u00e0 l'\u00e9tape suivante 4- Cliquez sur le bouton Customize installation (pas d'installation rapide) Cochez les bonnes cases avant de passer \u00e0 l'\u00e9tape suivante V\u00e9rifiez que le r\u00e9pertoire d'installation soit bien le r\u00e9pertoire des programmes de Windows Python est install\u00e9 Si vous souhaitez d\u00e9sinstaller une version, il vous faut relancer l'installateur d'origine Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet 4- Cliquez sur le bouton Continuer 5- Cliquez sur le bouton Continuer 6- Cliquez sur le bouton Continuer 7- Cliquez sur le bouton Accepter 8- Cliquez sur le bouton Continuer 9- Cliquez sur le bouton Installer le programme s'installe 10- le programme est install\u00e9 Installer des librairies \u2693\ufe0e Installer des librairies Sous Windows\"\" Sous Mac\" 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python.exe -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python.exe -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python3 -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame Des outils pour d\u00e9velopper \u2693\ufe0e Les environnements de d\u00e9veloppement Pour cr\u00e9er des programmes vous pouvez utiliser un \u00e9diteur de texte standard, mais ce n'est pas le choix le plus pratique et le plus efficace. Un environnement de d\u00e9veloppement (IDE) fournit une interface adapt\u00e9e aux diff\u00e9rentes t\u00e2ches du d\u00e9veloppeur. Plusieurs choix possibles : des applications sur l'ordinateur, 2 essentiellement : Thonny, un environnement l\u00e9ger qui permet un d\u00e9boguage rapide Visual Studio Code, un environnement plus professionnel des applications en ligne : Python Tutor, essentiellement pour apprendre les m\u00e9canismes principaux de la programmation Basthon : un \u00e9diteur python en ligne Replit : une application en ligne qui permet le travail en \u00e9quipe sur le m\u00eame fichier Vous aurez aussi la possibilit\u00e9 de travailler directement en ligne sur ce site Thonny Visual Studio Code Python tutor Basthon Replit Un \u00e9diteur simple et basique, qui permet de faire du pas \u00e0 pas facilement (pour d\u00e9boguer ou comprendre un programme) 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://thonny.org 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC ou mac), pour l'installer sur votre machine 3- cliquez sur le bouton 'install for users', puis pour les \u00e9crans suivants acceptez par d\u00e9faut 4- lors du premier lancement vous pouvez choisir la langue par d\u00e9faut Thonny installe sa propre version de Python, ce qui oblige en particulier \u00e0 installer les nouvelles librairies par l'interm\u00e9diaire de l'interface Thonny 5- dans le menu Outils, avec la commande G\u00e9rer les paquets... 6- Une recherche du module souhait\u00e9, puis son installation Un \u00e9diteur beaucoup plus professionnel, mais rapide et tr\u00e8s performant. A l'origine c'est un produit gratuit d\u00e9riv\u00e9 du produit phare de chez Microsoft 'Visual Studio'. Il a \u00e9t\u00e9 tr\u00e8s vite adopt\u00e9 par de nombreux d\u00e9veloppeurs et est devenu un produit r\u00e9guli\u00e8rement maintenu et am\u00e9lior\u00e9. Il est toujours gratuit, robuste et mature. De plus gr\u00e2ce \u00e0 ses modules il pourra vous servir pour beaucoup d'autres langages 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://code.visualstudio.com/ et cliquez sur le bouton Download 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC, mac ou linux), pour l'installer sur votre machine 3- s\u00e9lectionnez 'Je comprends et ...' et cliquez sur Suivant 4- gardez le dossier de destination propos\u00e9 et cliquez sur Suivant 5 cliquez sur Suivant 6- vous pouvez opter pour une icone sur le bureau, cliquez sur Suivant 7- cliquez sur Installer Apr\u00e8s cette premi\u00e8re installation, il va falloir ajouter quelques extensions pour pouvoir \u00eatre vraiment op\u00e9rationnel Nous allons pour cela utiliser l'option 'extensions' sur le cot\u00e9 gauche de l'application Il existe de nombreuses extensions Il existe une option originale pour d\u00e9couvrir la programmation en Python gr\u00e2ce au logiciel en ligne Python Tutor. Cet outil permet de visualiser en live le d\u00e9roulement d'un programme. C'est un outil p\u00e9dagogique de choix qui de plus ne requiert aucune installation. Python Tutor a \u00e9t\u00e9 cr\u00e9\u00e9 par Philip Guo, professeur assistant \u00e0 l'universit\u00e9 de Californie. Il a cr\u00e9e Python Tutor pour aider les gens \u00e0 comprendre ce qu'il se passe chaque fois qu'une ligne de code est ex\u00e9cut\u00e9e. Disponible en licence libre, cet outil est accessible depuis le site : http://pythontutor.com/live.html On cr\u00e9\u00e9 son code, on clique sur le bouton 'Visualize Execution' On ex\u00e9cute le programme pas \u00e0 pas Si vous ne pouvez pas installer d'application sur votre machine et que vous souhaitez tout de m\u00eame tester quelques programmes Python, vous avez la solution Basthon. Un site en ligne qui permet de faire tourner vos programmes. Cette application est relativement puissante et vous pourrez faire tourner pratiquement tous les programmes \u00e0 voir cette ann\u00e9e. La documentation est tr\u00e8s bien faite (en fran\u00e7ais). disponible sur le site https://basthon.fr La console Python Il existe m\u00eame un module tutor qui permet d'utiliser l'application en ligne Python Tutor from tutor import tutor a = 5 a = a + 1 tutor () Un autre style de site en ligne. A la fa\u00e7on GitHub, ce site permet de cr\u00e9er des programmes en \u00e9quipe, avec une interface d'ex\u00e9cution","title":"Installation python"},{"location":"cours/installation_python/#python-sur-sa-machine","text":"V\u00e9rification de l'installation et de la version de Python install\u00e9 sur votre ordinateur Il se peut qu'une version de Python soit d\u00e9j\u00e0 pr\u00e9sente sur votre ordinateur. Suivez les indications ci-dessous pour le savoir Sous windows Sous Mac 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 --version Si python est pr\u00e9sent, la commande r\u00e9pond en donnant la version existante sur l'ordinateur 3- Pour conna\u00eetre le r\u00e9pertoire d'installation, tapez la commande where python3 La commande r\u00e9pond en donnant tous les chemins trouv\u00e9s ### Installer Python Installation de Python Sous Windows Sous Mac Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet N'oubliez pas de cliquer les 2 cases en bas (Install... et Add Python...), avant de passer \u00e0 l'\u00e9tape suivante 4- Cliquez sur le bouton Customize installation (pas d'installation rapide) Cochez les bonnes cases avant de passer \u00e0 l'\u00e9tape suivante V\u00e9rifiez que le r\u00e9pertoire d'installation soit bien le r\u00e9pertoire des programmes de Windows Python est install\u00e9 Si vous souhaitez d\u00e9sinstaller une version, il vous faut relancer l'installateur d'origine Cette installation est \u00e0 faire une unique fois sur votre ordinateur personnel 1- lancez votre navigateur pr\u00e9f\u00e9r\u00e9 et allez sur le site python.org, dans la section downloads 2- cliquez sur le bouton Download Python 3.10.5 (attention la version peut-\u00eatre diff\u00e9rente) pour lancer le t\u00e9l\u00e9chargement Le site d\u00e9tecte automatiquement la bonne version pour votre ordinateur 3- Lancez le fichier t\u00e9l\u00e9charg\u00e9, une fen\u00eatre d'installation appara\u00eet 4- Cliquez sur le bouton Continuer 5- Cliquez sur le bouton Continuer 6- Cliquez sur le bouton Continuer 7- Cliquez sur le bouton Accepter 8- Cliquez sur le bouton Continuer 9- Cliquez sur le bouton Installer le programme s'installe 10- le programme est install\u00e9","title":"Python sur sa machine"},{"location":"cours/installation_python/#installer-des-librairies","text":"Installer des librairies Sous Windows\"\" Sous Mac\" 1- Avec l'outil de recherche (la loupe) rechercher l'application cmd 2- une fois l'application lanc\u00e9e, tapez la commande python.exe -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python.exe -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame 1- Avec l'outil de recherche (la loupe) rechercher l'application terminal 2- une fois l'application lanc\u00e9e, tapez la commande python3 -m pip install --upgrade pip pour mettre \u00e0 jour l'application d'installation 3- puis tapez la commande python3 -m pip install pygame , dans cet exemple, il s'agit d'installer le package pygame","title":"Installer des librairies"},{"location":"cours/installation_python/#des-outils-pour-developper","text":"Les environnements de d\u00e9veloppement Pour cr\u00e9er des programmes vous pouvez utiliser un \u00e9diteur de texte standard, mais ce n'est pas le choix le plus pratique et le plus efficace. Un environnement de d\u00e9veloppement (IDE) fournit une interface adapt\u00e9e aux diff\u00e9rentes t\u00e2ches du d\u00e9veloppeur. Plusieurs choix possibles : des applications sur l'ordinateur, 2 essentiellement : Thonny, un environnement l\u00e9ger qui permet un d\u00e9boguage rapide Visual Studio Code, un environnement plus professionnel des applications en ligne : Python Tutor, essentiellement pour apprendre les m\u00e9canismes principaux de la programmation Basthon : un \u00e9diteur python en ligne Replit : une application en ligne qui permet le travail en \u00e9quipe sur le m\u00eame fichier Vous aurez aussi la possibilit\u00e9 de travailler directement en ligne sur ce site Thonny Visual Studio Code Python tutor Basthon Replit Un \u00e9diteur simple et basique, qui permet de faire du pas \u00e0 pas facilement (pour d\u00e9boguer ou comprendre un programme) 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://thonny.org 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC ou mac), pour l'installer sur votre machine 3- cliquez sur le bouton 'install for users', puis pour les \u00e9crans suivants acceptez par d\u00e9faut 4- lors du premier lancement vous pouvez choisir la langue par d\u00e9faut Thonny installe sa propre version de Python, ce qui oblige en particulier \u00e0 installer les nouvelles librairies par l'interm\u00e9diaire de l'interface Thonny 5- dans le menu Outils, avec la commande G\u00e9rer les paquets... 6- Une recherche du module souhait\u00e9, puis son installation Un \u00e9diteur beaucoup plus professionnel, mais rapide et tr\u00e8s performant. A l'origine c'est un produit gratuit d\u00e9riv\u00e9 du produit phare de chez Microsoft 'Visual Studio'. Il a \u00e9t\u00e9 tr\u00e8s vite adopt\u00e9 par de nombreux d\u00e9veloppeurs et est devenu un produit r\u00e9guli\u00e8rement maintenu et am\u00e9lior\u00e9. Il est toujours gratuit, robuste et mature. De plus gr\u00e2ce \u00e0 ses modules il pourra vous servir pour beaucoup d'autres langages 1- pour le t\u00e9l\u00e9charger, RDV sur le site https://code.visualstudio.com/ et cliquez sur le bouton Download 2- t\u00e9l\u00e9charger la version de votre ordinateur (PC, mac ou linux), pour l'installer sur votre machine 3- s\u00e9lectionnez 'Je comprends et ...' et cliquez sur Suivant 4- gardez le dossier de destination propos\u00e9 et cliquez sur Suivant 5 cliquez sur Suivant 6- vous pouvez opter pour une icone sur le bureau, cliquez sur Suivant 7- cliquez sur Installer Apr\u00e8s cette premi\u00e8re installation, il va falloir ajouter quelques extensions pour pouvoir \u00eatre vraiment op\u00e9rationnel Nous allons pour cela utiliser l'option 'extensions' sur le cot\u00e9 gauche de l'application Il existe de nombreuses extensions Il existe une option originale pour d\u00e9couvrir la programmation en Python gr\u00e2ce au logiciel en ligne Python Tutor. Cet outil permet de visualiser en live le d\u00e9roulement d'un programme. C'est un outil p\u00e9dagogique de choix qui de plus ne requiert aucune installation. Python Tutor a \u00e9t\u00e9 cr\u00e9\u00e9 par Philip Guo, professeur assistant \u00e0 l'universit\u00e9 de Californie. Il a cr\u00e9e Python Tutor pour aider les gens \u00e0 comprendre ce qu'il se passe chaque fois qu'une ligne de code est ex\u00e9cut\u00e9e. Disponible en licence libre, cet outil est accessible depuis le site : http://pythontutor.com/live.html On cr\u00e9\u00e9 son code, on clique sur le bouton 'Visualize Execution' On ex\u00e9cute le programme pas \u00e0 pas Si vous ne pouvez pas installer d'application sur votre machine et que vous souhaitez tout de m\u00eame tester quelques programmes Python, vous avez la solution Basthon. Un site en ligne qui permet de faire tourner vos programmes. Cette application est relativement puissante et vous pourrez faire tourner pratiquement tous les programmes \u00e0 voir cette ann\u00e9e. La documentation est tr\u00e8s bien faite (en fran\u00e7ais). disponible sur le site https://basthon.fr La console Python Il existe m\u00eame un module tutor qui permet d'utiliser l'application en ligne Python Tutor from tutor import tutor a = 5 a = a + 1 tutor () Un autre style de site en ligne. A la fa\u00e7on GitHub, ce site permet de cr\u00e9er des programmes en \u00e9quipe, avec une interface d'ex\u00e9cution","title":"Des outils pour d\u00e9velopper"},{"location":"cours/interactions_homme_machine/","text":"","title":"le Web interactif"},{"location":"cours/poo/","text":"La programmation objet \u2693\ufe0e","title":"La programmation objet"},{"location":"cours/poo/#la-programmation-objet","text":"","title":"La programmation objet"},{"location":"cours/structures_donnees/","text":"Les files \u2693\ufe0e Les piles \u2693\ufe0e Les graphes \u2693\ufe0e","title":"Piles, files et graphes"},{"location":"cours/structures_donnees/#les-files","text":"","title":"Les files"},{"location":"cours/structures_donnees/#les-piles","text":"","title":"Les piles"},{"location":"cours/structures_donnees/#les-graphes","text":"","title":"Les graphes"},{"location":"scripts/exo2_REM/","text":"Remarque sur la solution C'est simple mais il faut \u00eatre vigilant. Une autre remarque est possible Toujours simple mais toujours vigilant.","title":"exo2 REM"},{"location":"scripts/demo/algo_glouton_REM/","text":"Titre de commentaire C'est un test de commentaire","title":"algo glouton REM"},{"location":"scripts/demo/demo1_REM/","text":"Remarque Ceci est un exemple complexe de remarque. La premi\u00e8re ligne du fichier de remarque doit \u00eatre vide La syntaxe markdown est compl\u00e8tement pr\u00e9serv\u00e9e. Par exemple, un tableau : a b c 1 2 3 Une admonition ? Vous pouvez inclure des admonitions et des superfences dans vos remarques.","title":"demo1 REM"},{"location":"scripts/demo/demo2_REM/","text":"Des admonitions en remarque On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Toujours plus On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can. Encore On peut vraiment le faire ! Pour de vrai ! Yes, we can. Oh yes, we can.","title":"demo2 REM"},{"location":"scripts/dentiste/exo_REM/","text":"Une premi\u00e8re remarque Ceci est un exercice classique. D'autres d\u00e9tails On pourrait repr\u00e9senter la situation dans un tableau : a b c 1 2 3","title":"exo REM"},{"location":"scripts/dentiste/sujet/","text":"\u00c9locution chez le dentiste \u2693\ufe0e Chez le dentiste, la bouche grande ouverte, lorsqu'on essaie de parler, il ne reste que les voyelles. M\u00eame les ponctuations sont supprim\u00e9es. Vous devez \u00e9crire une fonction dentiste(texte) qui renvoie un texte ne contenant que les voyelles de texte , dans l'ordre. Les voyelles sont donn\u00e9es par : voyelles = [ 'a' , 'e' , 'i' , 'o' , 'u' , 'y' ] On ne consid\u00e8rera que des textes \u00e9crits en minuscules, sans accents. Exemples >>> dentiste ( \"j'ai mal\" ) 'aia' >>> dentiste ( \"il fait chaud\" ) 'iaiau' >>> dentiste ( \"\" ) '' Lancer # testsbksl-nlbksl-nlassert dentiste(\"j'ai mal\") == 'aia'bksl-nlassert dentiste(\"il fait chaud\") == 'iaiau'bksl-nlassert dentiste(\"\") == ''bksl-nlbksl-nlbksl-nl# pas d'autres testsbksl-nlbksl-nlassert dentiste(\"a\"py-str20 + \"b\"py-str10 + \"e\") == 'a'py-str20 + 'e'bksl-nlassert dentiste(\"b\"py-str10 + \"e\" + \"a\"py-str20) == 'e' + 'a'py-str20 bksl-nlassert dentiste(\"ab\"py-str10) == 'a'py-str10bksl-nlassert dentiste(\"aeiouy\"py-str10) == 'aeiouy'py-str10bksl-nlassert dentiste(\"z\"py-str100 + 'y') == 'y'bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder voyelles = ['a', 'e', 'i', 'o', 'u', 'y']bksl-nlbksl-nldef dentiste(texte):bksl-nl passbksl-nlbksl-nlassert dentiste(\"j'ai mal\") == 'aia'bksl-nlassert dentiste(\"il fait chaud\") == 'iaiau'bksl-nlassert dentiste(\"\") == ''bksl-nlbksl-nl voyelles = ['a', 'e', 'i', 'o', 'u', 'y']bksl-nlbksl-nldef dentiste(texte):bksl-nl resultat = ''bksl-nl for lettre in texte:bksl-nl if lettre in voyelles:bksl-nl resultat = resultat + lettrebksl-nl return resultatbksl-nlbksl-nl A Une premi\u00e8re remarque Ceci est un exercice classique. D'autres d\u00e9tails On pourrait repr\u00e9senter la situation dans un tableau : a b c 1 2 3 Z","title":"Dentiste"},{"location":"scripts/dentiste/sujet/#elocution-chez-le-dentiste","text":"Chez le dentiste, la bouche grande ouverte, lorsqu'on essaie de parler, il ne reste que les voyelles. M\u00eame les ponctuations sont supprim\u00e9es. Vous devez \u00e9crire une fonction dentiste(texte) qui renvoie un texte ne contenant que les voyelles de texte , dans l'ordre. Les voyelles sont donn\u00e9es par : voyelles = [ 'a' , 'e' , 'i' , 'o' , 'u' , 'y' ] On ne consid\u00e8rera que des textes \u00e9crits en minuscules, sans accents. Exemples >>> dentiste ( \"j'ai mal\" ) 'aia' >>> dentiste ( \"il fait chaud\" ) 'iaiau' >>> dentiste ( \"\" ) '' Lancer # testsbksl-nlbksl-nlassert dentiste(\"j'ai mal\") == 'aia'bksl-nlassert dentiste(\"il fait chaud\") == 'iaiau'bksl-nlassert dentiste(\"\") == ''bksl-nlbksl-nlbksl-nl# pas d'autres testsbksl-nlbksl-nlassert dentiste(\"a\"py-str20 + \"b\"py-str10 + \"e\") == 'a'py-str20 + 'e'bksl-nlassert dentiste(\"b\"py-str10 + \"e\" + \"a\"py-str20) == 'e' + 'a'py-str20 bksl-nlassert dentiste(\"ab\"py-str10) == 'a'py-str10bksl-nlassert dentiste(\"aeiouy\"py-str10) == 'aeiouy'py-str10bksl-nlassert dentiste(\"z\"py-str100 + 'y') == 'y'bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Recharger Sauvegarder voyelles = ['a', 'e', 'i', 'o', 'u', 'y']bksl-nlbksl-nldef dentiste(texte):bksl-nl passbksl-nlbksl-nlassert dentiste(\"j'ai mal\") == 'aia'bksl-nlassert dentiste(\"il fait chaud\") == 'iaiau'bksl-nlassert dentiste(\"\") == ''bksl-nlbksl-nl voyelles = ['a', 'e', 'i', 'o', 'u', 'y']bksl-nlbksl-nldef dentiste(texte):bksl-nl resultat = ''bksl-nl for lettre in texte:bksl-nl if lettre in voyelles:bksl-nl resultat = resultat + lettrebksl-nl return resultatbksl-nlbksl-nl A Une premi\u00e8re remarque Ceci est un exercice classique. D'autres d\u00e9tails On pourrait repr\u00e9senter la situation dans un tableau : a b c 1 2 3 Z","title":"\u00c9locution chez le dentiste"},{"location":"scripts/essai/moyenne_REM/","text":"essai","title":"moyenne REM"},{"location":"xtra/end_REM/","text":"Z","title":"end REM"},{"location":"xtra/start_REM/","text":"A","title":"start REM"}]}